#!/usr/bin/env bash

#  /$$$$$$$$ /$$      /$$ /$$   /$$ /$$   /$$        /$$$$$$                               /$$                     /$$
# |__  $$__/| $$$    /$$$| $$  | $$| $$  / $$       /$$__  $$                             |__/                    |__/
#    | $$   | $$$$  /$$$$| $$  | $$|  $$/ $$/      | $$  \__/  /$$$$$$   /$$$$$$$ /$$$$$$$ /$$  /$$$$$$  /$$$$$$$  /$$ /$$$$$$$$  /$$$$$$   /$$$$$$
#    | $$   | $$ $$/$$ $$| $$  | $$ \  $$$$/       |  $$$$$$  /$$__  $$ /$$_____//$$_____/| $$ /$$__  $$| $$__  $$| $$|____ /$$/ /$$__  $$ /$$__  $$
#    | $$   | $$  $$$| $$| $$  | $$  >$$  $$        \____  $$| $$$$$$$$|  $$$$$$|  $$$$$$ | $$| $$  \ $$| $$  \ $$| $$   /$$$$/ | $$$$$$$$| $$  \__/
#    | $$   | $$\  $ | $$| $$  | $$ /$$/\  $$       /$$  \ $$| $$_____/ \____  $$\____  $$| $$| $$  | $$| $$  | $$| $$  /$$__/  | $$_____/| $$
#    | $$   | $$ \/  | $$|  $$$$$$/| $$  \ $$      |  $$$$$$/|  $$$$$$$ /$$$$$$$//$$$$$$$/| $$|  $$$$$$/| $$  | $$| $$ /$$$$$$$$|  $$$$$$$| $$
#    |__/   |__/     |__/ \______/ |__/  |__/       \______/  \_______/|_______/|_______/ |__/ \______/ |__/  |__/|__/|________/ \_______/|__/
#
# Auther: mnjm (github.com/mnjm)
# Repo: github.com/mnjm/tmux-sessionizer
# License: MIT

LIST_FILE=${TMUX_SEZ_LIST_FILE:-"$HOME/.projects-tmux-sessionizer.list"}
FZF_COMMAND=${TMUX_SEZ_FZF_COMMAND:-"fzf --height 100%"}
[ -f "$LIST_FILE" ] || touch $LIST_FILE # Create list file if doesnt exists

display_help() {
    echo "TMUX Sessionizer - fzf based tmux session/project switcher"
    echo "For more info check https://github.com/mnjm/tmux-sessionizer/blob/main/README.md"
}

# List tmux session names with color codes
list_sessions() {
    local cur_sess=""
    [ -v TMUX ] && cur_sess=$(tmux display-message -p "#S")
    tmux list-sessions -F "#{session_name}" 2>> /dev/null | while read sess; do
        # skip current session
        if [[ $sess != $cur_sess ]]; then
            echo -e "\e[32m${sess}\e[0m"
        fi
    done
}

# List entries in $LIST_FILE with color codes
list_file_entries() {
    cat $LIST_FILE 2>> /dev/null | while read entry; do
        local name="${entry% *}"
        # Removes duplicates whose session already exists.
        if ! tmux has-session -t $name 2>/dev/null; then
            echo -e "\e[34m${entry}\e[0m"
        fi
    done
}

# tmux session switcher
switch() {
    local sessions=$(list_sessions)
    local file_entries=$(list_file_entries)
    [ ! -z "$sessions" ] && [ ! -z "$file_entries" ] && sessions="${sessions}\n"

    # fzf through both list_sessions and list_file_entries
    local selected=$( echo -e "$sessions$file_entries" | $FZF_COMMAND \
        --reverse --no-multi --print-query --delimiter=' ' --with-nth=1 --ansi \
        --preview "tmux-sessionizer __preview__ {}" --preview-window right,80% | tail -n1 )

    # split name and path
    local name=$(echo $selected | cut -f1 -d' ')
    local path=$(echo $selected | cut -f2 -d' ')
    # in case a new session is created
    [ -z $path ] && path="$HOME"

    # create / switch to selected session
    if [[ -n $selected ]]; then
        if [[ -z "$TMUX" ]]; then # if tmux is not running
            tmux new -As $name -c $path
        else
            if  ! tmux has-session -t $name 2>/dev/null; then # if session not found
                tmux new -ds $name -c $path
            fi
            tmux switch-client -t $name
        fi
    fi
}

# preview for entries, if it is a session then capture-pane else list dir contents
tmux_sessionzier_previewer() {
    # function reserved to be called as fzf previewer
    local name=$(echo $1 | cut -f1 -d' ')
    local path=$(echo $1 | cut -f2 -d' ')
    if tmux has-session -t $name 2>/dev/null; then
        tmux capture-pane -e -pt $name
    else
        echo -e "Session Name: \e[4m\e[34m$name\e[0m"
        echo -e "Dir: \e[35m$path\e[0m"
        echo "-----------------------------------------------"
        ls --group-directories-first --color=always $path
    fi
}

# remove duplicates and deleted dirs, replace . in session names with _
sanitize_list_file() {
    echo "Sanitizing $LIST_FILE"
    echo "--------------------"

    echo "Removing non-reachable entries"
    # go through each entry and sanitize
    local tmp_file=$(mktemp tms.XXXXX -p /tmp/)
    cat $LIST_FILE | while read line; do 
        local name="${line% *}"
        local path="${line#* }"
        # dots doesnt work in session_name, replace with _
        name=$(echo $name | tr '.' '_')
        if [ -d "$path" ]; then
            echo "$name $path" >> $tmp_file
        else
            echo "Removing $name: $path not reachable"
        fi
    done

    # Remove any duplicate entries
    echo "Removing duplicate entries"
    gawk -i inplace '!seen[$1]++' $tmp_file

    # update the file
    mv $LIST_FILE $LIST_FILE.old
    mv $tmp_file $LIST_FILE
    echo "Updated ${LIST_FILE}, old file can be found in ${LIST_FILE}.old"
}

# adds an entry into $LIST_FILE
add_to_list_file() {
    local path=$1
    local name=$2
    [ -z "$1" ] && path=$PWD # if path not providied use $PWD
    [ -z "$2" ] && name=$(basename $path) # if name not providid, use basename

    # dots doesnt work in session_name, replace with _
    name=$(echo $name | tr '.' '_')

    # add a new entry to LIST_FILE
    echo "$name $path" >> $LIST_FILE
    echo "Added $name -> $path to $LIST_FILE"

    # sanitize at the end
    sanitize_list_file
}

case $1 in
    add) add_to_list_file $2 $3;;
    switch) switch ;;
    sanitize) sanitize_list_file ;;
    edit) ${EDITOR:-vi} $LIST_FILE ;;
    __preview__) tmux_sessionzier_previewer "$2";;
    *) display_help ;;
esac
